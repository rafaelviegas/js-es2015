{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAW;;AAEhC,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,YAAf;;AAEA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAEA;AAEY,qCAAa;AAAA;;AAET,kBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;AALb;AAAA;AAAA,4CAO8B;;AAElB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,gCAAYI,eAAZ,GAA8B,aAAK;;AAE/Bd,0CAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,qBAHD;;AAKAR,gCAAYS,SAAZ,GAAwB,aAAK;;AAE7B,4BAAG,CAACf,UAAJ,EAAe;AACXA,yCAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAU;AACzB,sCAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACH,6BAFD;AAGH;AACGE,gCAAQJ,UAAR;AACH,qBAVD;;AAYAM,gCAAYW,OAAZ,GAAsB,aAAK;;AAEvBC,gCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;;AAEAf,+BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,qBALD;AAOH,iBA5BM,CAAP;AA8BH;AAvCT;AAAA;AAAA,0CAwC6BrB,UAxC7B,EAwCwC;;AAE5BH,uBAAOyB,OAAP,CAAe,iBAAS;AACpB,wBAAGtB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAAgDzB,WAAW0B,iBAAX,CAA6BD,KAA7B;;AAEhDzB,+BAAW2B,iBAAX,CAA6BF,KAA7B,EAAmC,EAACG,eAAe,IAAhB,EAAnC;AACH,iBAJD;AAKH;AA/CT;AAAA;AAAA,8CAgDgC;;AAEpB,oBAAG5B,UAAH,EAAc;AACVC;AACAD,iCAAa,IAAb;AACH;AACJ;AAtDT;;AAAA;AAAA;AAwDH,CAjEuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function (){\r\n\r\n    const stores = ['Negociacoes'];\r\n    const version = 4;\r\n    const dbName = 'aluraframe';\r\n    \r\n    var connection = null;\r\n    var close = null;\r\n\r\n    return class ConnectionFactory {\r\n\r\n                constructor(){\r\n                    \r\n                    throw new Error('Não é possivel criar instâncias de ConnectionFactory');\r\n                }\r\n\r\n            static getConnection(){\r\n\r\n                return new Promise((resolve, reject) => {\r\n                    \r\n                    let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n                    openRequest.onupgradeneeded = e => {\r\n\r\n                        ConnectionFactory._createStores(e.target.result);\r\n                    };\r\n\r\n                    openRequest.onsuccess = e => {\r\n\r\n                    if(!connection){\r\n                        connection = e.target.result;\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = function(){\r\n                            throw new Error('Você não pode fechar diretamente a conexão.');\r\n                        };\r\n                    }  \r\n                        resolve(connection);\r\n                    };\r\n\r\n                    openRequest.onerror = e => {\r\n                        \r\n                        console.log(e.target.error);\r\n\r\n                        reject(e.target.error.name);\r\n                    };\r\n\r\n                });\r\n\r\n            }\r\n            static _createStores(connection){\r\n\r\n                stores.forEach(store => {\r\n                    if(connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\r\n\r\n                    connection.createObjectStore(store,{autoIncrement: true});\r\n                });\r\n            }\r\n            static closeConnection(){\r\n\r\n                if(connection){\r\n                    close();\r\n                    connection = null;\r\n                }\r\n            }\r\n        }\r\n})();"]}