{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","Promise","resolve","reject","get","then","negociacoes","map","Negociacao","Date","obj","data","quantidade","valor","catch","console","log","erro","negociacao","ConnectionFactory","getConnection","NegociacaoDao","connection","dao","adiciona","Error","listaTodos","apagaTodos","listaAtual","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","reduce","arrayAchatado","array","concat","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\r\n    constructor(){\r\n        this._http = new HttpService();\r\n    }\r\n\r\n    obterNegociacoesDaSemana(){\r\n        \r\n        return new Promise((resolve, reject) => {\r\n            this._http\r\n            .get('negociacoes/semana')\r\n            .then(negociacoes => {\r\n                resolve(negociacoes.map(obj => new Negociacao(new Date(obj.data), obj.quantidade,obj.valor)));\r\n            })\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                reject('Não foi possivel obter as negociações da semana')\r\n            });\r\n\r\n        });\r\n\r\n    }\r\n\r\n    obterNegociacoesDaSemanaAnterior(){\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this._http\r\n            .get('negociacoes/anterior')\r\n            .then(negociacoes => {\r\n                  resolve(negociacoes.map(obj => new Negociacao(new Date(obj.data), obj.quantidade,obj.valor)));\r\n            })\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                reject('Não foi possivel obter as negociações da semana anterior')\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n    obterNegociacoesDaSemanaRetrasada(){\r\n        return new Promise((resolve, reject) => {\r\n            this._http\r\n            .get('negociacoes/retrasada')\r\n            .then(negociacoes => {\r\n                  resolve(negociacoes.map(obj => new Negociacao(new Date(obj.data), obj.quantidade,obj.valor)));\r\n            })\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                reject('Não foi possivel obter as negociações da semana retrasada')\r\n            });\r\n        });\r\n    } \r\n\r\n    cadastra(negociacao){\r\n\r\n         return ConnectionFactory\r\n                .getConnection()\r\n                .then(connection => new NegociacaoDao(connection))\r\n                .then(dao => dao.adiciona(negociacao))\r\n                .then(() => 'Negociação adicionada com sucesso')\r\n                .catch(() => {\r\n                    console.log(erro);\r\n                    throw new Error('Não foi possível adicionar a negociação')\r\n                });\r\n    }\r\n    lista(){\r\n        return ConnectionFactory\r\n                .getConnection()\r\n                .then(connection => new NegociacaoDao(connection))\r\n                .then(dao => dao.listaTodos())\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    throw new Error('Não foi possivel obter as negociações');\r\n                });\r\n    }\r\n    apaga(){\r\n      return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .then(mensagem => 'Negociações apagadas com sucesso')\r\n            .catch(erro => {\r\n                    console.log(erro);\r\n                    throw new Error('Não foi possivel apagar as negociações');\r\n            })\r\n           \r\n    }\r\n    importa(listaAtual){\r\n        \r\n      return Promise.all([\r\n                this.obterNegociacoesDaSemana(),\r\n                this.obterNegociacoesDaSemanaAnterior(),\r\n                this.obterNegociacoesDaSemanaRetrasada()]\r\n            ).then(negociacoes => {\r\n                return  negociacoes\r\n                        .reduce((arrayAchatado, array) => arrayAchatado.concat(array),[])\r\n                        .filter(negociacao => \r\n                            !listaAtual.some(negociacaoExistente => \r\n                            JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)))   \r\n                       \r\n            }).catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possivel buscar negociações para importar');\r\n            })\r\n    }       \r\n}"]}