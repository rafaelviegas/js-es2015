{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDao","Negociacao","NegociacaoService","_http","Promise","resolve","reject","get","then","negociacoes","map","Date","obj","data","quantidade","valor","catch","console","log","erro","negociacao","getConnection","connection","dao","adiciona","Error","listaTodos","apagaTodos","listaAtual","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","reduce","arrayAchatado","array","concat","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService';\r\nimport {ConnectionFactory} from './ConnectionFactory';\r\nimport {NegociacaoDao} from '../dao/NegociacaoDao';\r\nimport {Negociacao} from '../models/Negociacao';\r\n\r\nexport class NegociacaoService {\r\n    constructor(){\r\n        this._http = new HttpService();\r\n    }\r\n\r\n    obterNegociacoesDaSemana(){\r\n        \r\n        return new Promise((resolve, reject) => {\r\n            this._http\r\n            .get('negociacoes/semana')\r\n            .then(negociacoes => {\r\n                resolve(negociacoes.map(obj => new Negociacao(new Date(obj.data), obj.quantidade,obj.valor)));\r\n            })\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                reject('Não foi possivel obter as negociações da semana')\r\n            });\r\n\r\n        });\r\n\r\n    }\r\n\r\n    obterNegociacoesDaSemanaAnterior(){\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this._http\r\n            .get('negociacoes/anterior')\r\n            .then(negociacoes => {\r\n                  resolve(negociacoes.map(obj => new Negociacao(new Date(obj.data), obj.quantidade,obj.valor)));\r\n            })\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                reject('Não foi possivel obter as negociações da semana anterior')\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n    obterNegociacoesDaSemanaRetrasada(){\r\n        return new Promise((resolve, reject) => {\r\n            this._http\r\n            .get('negociacoes/retrasada')\r\n            .then(negociacoes => {\r\n                  resolve(negociacoes.map(obj => new Negociacao(new Date(obj.data), obj.quantidade,obj.valor)));\r\n            })\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                reject('Não foi possivel obter as negociações da semana retrasada')\r\n            });\r\n        });\r\n    } \r\n\r\n    cadastra(negociacao){\r\n\r\n         return ConnectionFactory\r\n                .getConnection()\r\n                .then(connection => new NegociacaoDao(connection))\r\n                .then(dao => dao.adiciona(negociacao))\r\n                .then(() => 'Negociação adicionada com sucesso')\r\n                .catch(() => {\r\n                    console.log(erro);\r\n                    throw new Error('Não foi possível adicionar a negociação')\r\n                });\r\n    }\r\n    lista(){\r\n        return ConnectionFactory\r\n                .getConnection()\r\n                .then(connection => new NegociacaoDao(connection))\r\n                .then(dao => dao.listaTodos())\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    throw new Error('Não foi possivel obter as negociações');\r\n                });\r\n    }\r\n    apaga(){\r\n      return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .then(mensagem => 'Negociações apagadas com sucesso')\r\n            .catch(erro => {\r\n                    console.log(erro);\r\n                    throw new Error('Não foi possivel apagar as negociações');\r\n            })\r\n           \r\n    }\r\n    importa(listaAtual){\r\n        \r\n      return Promise.all([\r\n                this.obterNegociacoesDaSemana(),\r\n                this.obterNegociacoesDaSemanaAnterior(),\r\n                this.obterNegociacoesDaSemanaRetrasada()]\r\n            ).then(negociacoes => {\r\n                return  negociacoes\r\n                        .reduce((arrayAchatado, array) => arrayAchatado.concat(array),[])\r\n                        .filter(negociacao => \r\n                            !listaAtual.some(negociacaoExistente => \r\n                            JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)))   \r\n                       \r\n            }).catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possivel buscar negociações para importar');\r\n            })\r\n    }       \r\n}"]}